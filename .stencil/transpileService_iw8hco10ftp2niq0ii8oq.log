{"moduleFile":{"sourceFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/components/state/state.tsx","jsFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/components/state/state.js","cmps":[{"isLegacy":false,"tagName":"app-state","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"State","elementRef":null,"encapsulation":"none","shadowDelegatesFocus":null,"properties":[],"virtualProperties":[],"states":[],"methods":[],"listeners":[],"events":[],"watchers":[],"styles":[{"modeName":"$","styleId":"APP-STATE","styleStr":null,"styleIdentifier":null,"compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/Users/jadekim/Projects/Practice/design-patterns/src/components/state/state.css","relativePath":"state.css","originalComponentPath":"state.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/components/state/state.js","sourceFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/components/state/state.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":false,"hasComponentShouldUpdateFn":false,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":false,"hasLifecycle":false,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":false,"hasMethod":false,"hasMode":false,"hasAttribute":false,"hasProp":false,"hasPropNumber":false,"hasPropBoolean":false,"hasPropString":false,"hasPropMutable":false,"hasReflect":false,"hasRenderFn":true,"hasState":false,"hasStyle":true,"hasVdomAttribute":true,"hasVdomXlink":false,"hasVdomClass":true,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":true,"hasWatchCallback":false,"isPlain":false,"htmlAttrNames":["class","onClick","ref","id","onMouseDown","onMouseUp"],"htmlTagNames":["div","h3","h5","button"],"isUpdateable":false,"potentialCmpRefs":[]}],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":["/Users/jadekim/Projects/Practice/design-patterns/src/global/State/Canvas","/Users/jadekim/Projects/Practice/design-patterns/src/global/State/PaintTool","/Users/jadekim/Projects/Practice/design-patterns/src/global/State/EraserTool"],"originalCollectionComponentPath":null,"originalImports":["@stencil/core","../../global/State/Canvas","../../global/State/PaintTool","../../global/State/EraserTool"],"potentialCmpRefs":[]},"jsText":"import { h } from \"@stencil/core\";\r\nimport { Canvas } from '../../global/State/Canvas';\r\nimport { PaintTool } from '../../global/State/PaintTool';\r\nimport { EraserTool } from '../../global/State/EraserTool';\r\nexport class State {\r\n    constructor() {\r\n        this.canvas = new Canvas;\r\n        this.paintTool = new PaintTool;\r\n        this.eraserTool = new EraserTool;\r\n    }\r\n    render() {\r\n        return (h(\"div\", null,\r\n            h(\"h3\", null, \"State Pattern\"),\r\n            h(\"h5\", null, \"Select tool\"),\r\n            h(\"button\", { class: \"btn-large\", onClick: (e) => this.setTool(e) }, \"Paint Tool\"),\r\n            h(\"button\", { class: \"btn-large\", onClick: (e) => this.setTool(e) }, \"Eraser Tool\"),\r\n            h(\"h5\", null, \"Draw in the canvas\"),\r\n            h(\"div\", { ref: el => this.stateCanvas = el, id: \"stateCanvas\", onMouseDown: _ => this.onMouseDown(), onMouseUp: _ => this.onMouseUp() }, \"Canvas\"),\r\n            h(\"h5\", null, \"What's going on in the canvas\"),\r\n            h(\"div\", { ref: el => this.result = el })));\r\n    }\r\n    setTool(e) {\r\n        const tool = e.target.innerText;\r\n        if (tool === \"Paint Tool\") {\r\n            this.canvas.setCurrentTool(this.paintTool);\r\n        }\r\n        else if (tool === \"Eraser Tool\") {\r\n            this.canvas.setCurrentTool(this.eraserTool);\r\n        }\r\n    }\r\n    onMouseDown() {\r\n        const result = this.canvas.mouseDown();\r\n        this.result.innerHTML = result;\r\n    }\r\n    onMouseUp() {\r\n        const result = this.canvas.mouseUp();\r\n        this.result.innerHTML = result;\r\n    }\r\n    static get is() { return \"app-state\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"state.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"state.css\"]\r\n    }; }\r\n}\r\n"}