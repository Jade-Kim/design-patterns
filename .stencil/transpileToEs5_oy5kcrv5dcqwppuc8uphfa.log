System.register(['./p-70e1058c.system.js', './p-168ec2c4.system.js', './p-58488137.system.js'], function (exports) {
    'use strict';
    var registerInstance, h, getElement, matchPath, isModifiedEvent, ActiveRouter;
    return {
        setters: [function (module) {
                registerInstance = module.r;
                h = module.h;
                getElement = module.g;
            }, function (module) {
                matchPath = module.m;
                isModifiedEvent = module.q;
            }, function (module) {
                ActiveRouter = module.A;
            }],
        execute: function () {
            var getUrl = function (url, root) {
                // Don't allow double slashes
                if (url.charAt(0) == '/' && root.charAt(root.length - 1) == '/') {
                    return root.slice(0, root.length - 1) + url;
                }
                return root + url;
            };
            var RouteLink = exports('stencil_route_link', /** @class */ (function () {
                function class_1(hostRef) {
                    registerInstance(this, hostRef);
                    this.unsubscribe = function () { return; };
                    this.activeClass = 'link-active';
                    this.exact = false;
                    this.strict = true;
                    /**
                      *  Custom tag to use instead of an anchor
                      */
                    this.custom = 'a';
                    this.match = null;
                }
                class_1.prototype.componentWillLoad = function () {
                    this.computeMatch();
                };
                // Identify if the current route is a match.
                class_1.prototype.computeMatch = function () {
                    if (this.location) {
                        this.match = matchPath(this.location.pathname, {
                            path: this.urlMatch || this.url,
                            exact: this.exact,
                            strict: this.strict
                        });
                    }
                };
                class_1.prototype.handleClick = function (e) {
                    if (isModifiedEvent(e) || !this.history || !this.url || !this.root) {
                        return;
                    }
                    e.preventDefault();
                    return this.history.push(getUrl(this.url, this.root));
                };
                // Get the URL for this route link without the root from the router
                class_1.prototype.render = function () {
                    var _a;
                    var anchorAttributes = {
                        class: (_a = {},
                            _a[this.activeClass] = this.match !== null,
                            _a),
                        onClick: this.handleClick.bind(this)
                    };
                    if (this.anchorClass) {
                        anchorAttributes.class[this.anchorClass] = true;
                    }
                    if (this.custom === 'a') {
                        anchorAttributes = Object.assign({}, anchorAttributes, { href: this.url, title: this.anchorTitle, role: this.anchorRole, tabindex: this.anchorTabIndex, 'aria-haspopup': this.ariaHaspopup, id: this.anchorId, 'aria-posinset': this.ariaPosinset, 'aria-setsize': this.ariaSetsize, 'aria-label': this.ariaLabel });
                    }
                    return (h(this.custom, Object.assign({}, anchorAttributes), h("slot", null)));
                };
                Object.defineProperty(class_1.prototype, "el", {
                    get: function () { return getElement(this); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(class_1, "watchers", {
                    get: function () {
                        return {
                            "location": ["computeMatch"]
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                return class_1;
            }()));
            ActiveRouter.injectProps(RouteLink, [
                'history',
                'location',
                'root'
            ]);
        }
    };
});
