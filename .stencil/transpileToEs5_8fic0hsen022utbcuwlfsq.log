var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
System.register(['./p-70e1058c.system.js'], function (exports) {
    'use strict';
    var registerInstance, h;
    return {
        setters: [function (module) {
                registerInstance = module.r;
                h = module.h;
            }],
        execute: function () {
            var UserDBService = /** @class */ (function () {
                function UserDBService() {
                }
                UserDBService.prototype.addUser = function () {
                    alert("Add user in DB service");
                };
                UserDBService.prototype.getUser = function () {
                    alert("Get user info from DB service");
                };
                return UserDBService;
            }());
            var ShoppingService = /** @class */ (function () {
                function ShoppingService() {
                }
                ShoppingService.prototype.saveShoppingCart = function (items) {
                    alert("Save Shopping Cart: " + items);
                };
                ShoppingService.prototype.sell = function (items) {
                    alert("Sell: " + items);
                };
                ShoppingService.prototype.buy = function (items) {
                    alert("Buy " + items);
                };
                return ShoppingService;
            }());
            var TheCommand = /** @class */ (function () {
                function TheCommand() {
                    this.uid = Math.floor(Math.random() * 10000000);
                }
                TheCommand.prototype.getUID = function () {
                    return "Command UID: " + this.uid;
                };
                return TheCommand;
            }());
            // User DB Service
            var AddUserCommand = /** @class */ (function (_super) {
                __extends(AddUserCommand, _super);
                function AddUserCommand(service) {
                    var _this = _super.call(this) || this;
                    _this.service = service;
                    return _this;
                }
                AddUserCommand.prototype.execute = function () {
                    this.service.addUser();
                };
                return AddUserCommand;
            }(TheCommand));
            var GetUserCommand = /** @class */ (function (_super) {
                __extends(GetUserCommand, _super);
                function GetUserCommand(service) {
                    var _this = _super.call(this) || this;
                    _this.service = service;
                    return _this;
                }
                GetUserCommand.prototype.execute = function () {
                    this.service.getUser();
                };
                return GetUserCommand;
            }(TheCommand));
            // Shopping Service
            var ShopSellCommand = /** @class */ (function (_super) {
                __extends(ShopSellCommand, _super);
                function ShopSellCommand(service) {
                    var _this = _super.call(this) || this;
                    _this.service = service;
                    return _this;
                }
                ShopSellCommand.prototype.execute = function (items) {
                    this.service.sell(items);
                };
                return ShopSellCommand;
            }(TheCommand));
            var ShopBuyCommand = /** @class */ (function (_super) {
                __extends(ShopBuyCommand, _super);
                function ShopBuyCommand(service) {
                    var _this = _super.call(this) || this;
                    _this.service = service;
                    return _this;
                }
                ShopBuyCommand.prototype.execute = function (items) {
                    this.service.buy(items);
                };
                return ShopBuyCommand;
            }(TheCommand));
            var SaveCartCommand = /** @class */ (function (_super) {
                __extends(SaveCartCommand, _super);
                function SaveCartCommand(service) {
                    var _this = _super.call(this) || this;
                    _this.service = service;
                    return _this;
                }
                SaveCartCommand.prototype.execute = function (items) {
                    this.service.saveShoppingCart(items);
                };
                return SaveCartCommand;
            }(TheCommand));
            var Button = /** @class */ (function () {
                function Button() {
                    this.commands = [];
                }
                Button.prototype.executeCommand = function (command, args) {
                    this.commands.push(command);
                    command.execute(args);
                };
                Object.defineProperty(Button.prototype, "getCommands", {
                    get: function () {
                        return this.commands;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Button;
            }());
            var CLCommand = /** @class */ (function () {
                function CLCommand() {
                    this.uid = Math.floor(Math.random() * 10000000);
                    this.timestamp = new Date().getTime();
                }
                CLCommand.prototype.getUID = function () {
                    return "Command UID: " + this.uid;
                };
                return CLCommand;
            }());
            var CreateTicketCommand = /** @class */ (function (_super) {
                __extends(CreateTicketCommand, _super);
                function CreateTicketCommand(service, data) {
                    var _this = _super.call(this) || this;
                    _this.service = service;
                    _this.data = data;
                    _this.order = 2;
                    return _this;
                }
                CreateTicketCommand.prototype.execute = function () {
                    this.service.createTicket(this.data);
                };
                return CreateTicketCommand;
            }(CLCommand));
            var CreateAddressCommand = /** @class */ (function (_super) {
                __extends(CreateAddressCommand, _super);
                function CreateAddressCommand(service, data) {
                    var _this = _super.call(this) || this;
                    _this.service = service;
                    _this.data = data;
                    _this.order = 1;
                    return _this;
                }
                CreateAddressCommand.prototype.execute = function () {
                    this.service.createAddress(this.data);
                };
                return CreateAddressCommand;
            }(CLCommand));
            var CloseTicketCommand = /** @class */ (function (_super) {
                __extends(CloseTicketCommand, _super);
                function CloseTicketCommand(service, data) {
                    var _this = _super.call(this) || this;
                    _this.service = service;
                    _this.data = data;
                    _this.order = 3;
                    return _this;
                }
                CloseTicketCommand.prototype.execute = function () {
                    this.service.closeTicket(this.data);
                };
                return CloseTicketCommand;
            }(CLCommand));
            var CommandService = /** @class */ (function () {
                function CommandService() {
                }
                CommandService.prototype.createTicket = function (data) {
                    alert("create ticket " + data.id);
                };
                CommandService.prototype.createAddress = function (data) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            alert("create address " + data.id);
                            return [2 /*return*/];
                        });
                    });
                };
                CommandService.prototype.closeTicket = function (data) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            alert("close ticket " + data.id);
                            return [2 /*return*/];
                        });
                    });
                };
                return CommandService;
            }());
            var CommandManager = /** @class */ (function () {
                function CommandManager() {
                    this.commands = [];
                }
                CommandManager.prototype.add = function (cmd) {
                    this.commands.push(cmd);
                };
                CommandManager.prototype.executeCommand = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var _i, _a, cmd, e_1;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    // sort command by order
                                    this.commands = this.commands.sort(getOrderBy("order"));
                                    _i = 0, _a = this.commands;
                                    _b.label = 1;
                                case 1:
                                    if (!(_i < _a.length)) return [3 /*break*/, 6];
                                    cmd = _a[_i];
                                    _b.label = 2;
                                case 2:
                                    _b.trys.push([2, 4, , 5]);
                                    return [4 /*yield*/, cmd.execute()];
                                case 3:
                                    _b.sent();
                                    return [3 /*break*/, 5];
                                case 4:
                                    e_1 = _b.sent();
                                    console.log(e_1);
                                    return [3 /*break*/, 5];
                                case 5:
                                    _i++;
                                    return [3 /*break*/, 1];
                                case 6: return [2 /*return*/];
                            }
                        });
                    });
                };
                return CommandManager;
            }());
            function getOrderBy(key) {
                return function innerSort(a, b) {
                    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key))
                        return 0;
                    var varA = a[key];
                    var varB = b[key];
                    var comparison = 0;
                    if (varA > varB) {
                        comparison = 1;
                    }
                    else if (varA < varB) {
                        comparison = -1;
                    }
                    return comparison;
                };
            }
            var CanvasHistory = /** @class */ (function () {
                function CanvasHistory() {
                    this.commands = [];
                }
                CanvasHistory.prototype.push = function (command) {
                    this.commands.push(command);
                };
                CanvasHistory.prototype.pop = function () {
                    return this.commands.pop();
                };
                Object.defineProperty(CanvasHistory.prototype, "length", {
                    get: function () {
                        return this.commands.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                return CanvasHistory;
            }());
            var CanvasDocument = /** @class */ (function () {
                function CanvasDocument() {
                }
                CanvasDocument.prototype.drawLine = function () {
                    this.content = "Draw line";
                };
                CanvasDocument.prototype.drawCircle = function () {
                    this.content = "Draw Circle";
                };
                CanvasDocument.prototype.paintBlue = function () {
                    this.content = "Paint Blue";
                };
                CanvasDocument.prototype.paintRed = function () {
                    this.content = "Paint Red";
                };
                Object.defineProperty(CanvasDocument.prototype, "getContent", {
                    get: function () {
                        return this.content;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CanvasDocument.prototype, "setContent", {
                    set: function (content) {
                        this.content = content;
                    },
                    enumerable: true,
                    configurable: true
                });
                return CanvasDocument;
            }());
            var CanvasCommand = /** @class */ (function () {
                function CanvasCommand() {
                    this.uid = Math.floor(Math.random() * 10000000);
                }
                CanvasCommand.prototype.getUID = function () {
                    return "Command UID: " + this.uid;
                };
                return CanvasCommand;
            }());
            var UndoableCommand = /** @class */ (function (_super) {
                __extends(UndoableCommand, _super);
                function UndoableCommand() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return UndoableCommand;
            }(CanvasCommand));
            // Canvas Editor - undoable command
            var DrawLineCommand = /** @class */ (function (_super) {
                __extends(DrawLineCommand, _super);
                function DrawLineCommand(doc, history) {
                    var _this = _super.call(this) || this;
                    _this.doc = doc;
                    _this.history = history;
                    return _this;
                }
                DrawLineCommand.prototype.execute = function () {
                    this.prevContent = this.doc.getContent;
                    this.doc.drawLine();
                    this.history.push(this);
                };
                DrawLineCommand.prototype.unexecute = function () {
                    this.doc.setContent = this.prevContent;
                };
                return DrawLineCommand;
            }(UndoableCommand));
            var DrawCircleCommand = /** @class */ (function (_super) {
                __extends(DrawCircleCommand, _super);
                function DrawCircleCommand(doc, history) {
                    var _this = _super.call(this) || this;
                    _this.doc = doc;
                    _this.history = history;
                    return _this;
                }
                DrawCircleCommand.prototype.execute = function () {
                    this.prevContent = this.doc.getContent;
                    this.doc.drawCircle();
                    this.history.push(this);
                };
                DrawCircleCommand.prototype.unexecute = function () {
                    this.doc.setContent = this.prevContent;
                };
                return DrawCircleCommand;
            }(UndoableCommand));
            var PaintBlueCommand = /** @class */ (function (_super) {
                __extends(PaintBlueCommand, _super);
                function PaintBlueCommand(doc, history) {
                    var _this = _super.call(this) || this;
                    _this.doc = doc;
                    _this.history = history;
                    return _this;
                }
                PaintBlueCommand.prototype.execute = function () {
                    this.prevContent = this.doc.getContent;
                    this.doc.paintBlue();
                    this.history.push(this);
                };
                PaintBlueCommand.prototype.unexecute = function () {
                    this.doc.setContent = this.prevContent;
                };
                return PaintBlueCommand;
            }(UndoableCommand));
            var PaintRedCommand = /** @class */ (function (_super) {
                __extends(PaintRedCommand, _super);
                function PaintRedCommand(doc, history) {
                    var _this = _super.call(this) || this;
                    _this.doc = doc;
                    _this.history = history;
                    return _this;
                }
                PaintRedCommand.prototype.execute = function () {
                    this.prevContent = this.doc.getContent;
                    this.doc.paintRed();
                    this.history.push(this);
                };
                PaintRedCommand.prototype.unexecute = function () {
                    this.doc.setContent = this.prevContent;
                };
                return PaintRedCommand;
            }(UndoableCommand));
            var UndoCommand = /** @class */ (function (_super) {
                __extends(UndoCommand, _super);
                function UndoCommand(history) {
                    var _this = _super.call(this) || this;
                    _this.history = history;
                    return _this;
                }
                UndoCommand.prototype.execute = function () {
                    this.history.length > 0 && this.history.pop().unexecute();
                };
                return UndoCommand;
            }(CanvasCommand));
            var Command = exports('app_command', /** @class */ (function () {
                function class_1(hostRef) {
                    registerInstance(this, hostRef);
                    this.userDBService = new UserDBService(); // Receiver
                    this.shoppingService = new ShoppingService(); // Receiver
                    this.button = new Button(); // Invoker
                    this.canvasHistory = new CanvasHistory();
                    this.doc = new CanvasDocument();
                    // **** Example 3
                    this.CLService = new CommandService(); // Receiver
                    this.CommandManager = new CommandManager(); // Invoker
                }
                class_1.prototype.render = function () {
                    var _this = this;
                    return (h("div", { class: "margin20" }, h("h3", null, "Command Pattern"), h("h6", { class: "grayHint" }, "- Turns a request into an object and execute any operation such as delay, queue or undo."), h("h6", { class: "grayHint" }, "- \uC694\uCCAD\uC744 \uD558\uB098\uC758 \uAC1D\uCCB4\uB85C \uB9CC\uB4E4\uC5B4 \uC800\uC7A5\uD55C \uB2E4\uC74C \uC5EC\uB7EC\uAC00\uC9C0 \uC694\uCCAD\uC744 \uC2E4\uD589, \uC9C0\uC5F0, \uC21C\uC11C\uB300\uB85C \uC2E4\uD589, \uC2E4\uD589 \uCDE8\uC18C \uB4F1\uC758 \uC791\uC5C5\uC744 \uD560 \uC218 \uC788\uB2E4."), h("h5", null, "Example 1) User DB Service & Shopping Service"), h("button", { class: "btn margin20", onClick: function (_) { return _this.addUser(); } }, "Add User"), h("button", { class: "btn margin20", onClick: function (_) { return _this.getUser(); } }, "Get User Info"), h("input", { ref: function (el) { return _this.items = el; }, type: "text", placeholder: "Type items you need to sell/buy/save." }), h("button", { class: "btn margin20 cyan", onClick: function (_) { return _this.sell(); } }, "Sell"), h("button", { class: "btn margin20 cyan", onClick: function (_) { return _this.buy(); } }, "Buy"), h("button", { class: "btn margin20 cyan", onClick: function (_) { return _this.saveCart(); } }, "Save Cart"), h("h5", null, "Example 2) Canvas Editor - Undo Mechanism"), h("button", { class: "btn margin20 blue", onClick: function (_) { return _this.circle(); } }, "Draw a circle"), h("button", { class: "btn margin20 blue", onClick: function (_) { return _this.line(); } }, "Draw a line"), h("button", { class: "btn margin20 blue", onClick: function (_) { return _this.red(); } }, "Paint red"), h("button", { class: "btn margin20 blue", onClick: function (_) { return _this.blue(); } }, "Paint blue"), h("button", { class: "btn margin20 red", onClick: function (_) { return _this.undo(); } }, "Undo"), h("div", { class: "resultDiv margin20" }, h("h6", null, "** Canvas **"), this.currentCanvas), h("h5", null, "Example 3) Add command and execute all commands at once"), h("button", { class: "btn margin20", onClick: function (_) { return _this.createTicket(); } }, "Create ticket"), h("button", { class: "btn margin20", onClick: function (_) { return _this.createAddress(); } }, "Create address"), h("button", { class: "btn margin20", onClick: function (_) { return _this.closeTicket(); } }, "Close ticket"), h("button", { class: "btn margin20 teal accent-2 black-text", onClick: function (_) { return _this.executeAll(); } }, "Execute Commands"), h("pattern-photos", { uml: "command-uml.png", imp: "command-i.png", cl: "command.png" })));
                };
                class_1.prototype.addUser = function () {
                    var command = new AddUserCommand(this.userDBService); // Concrete Command
                    this.button.executeCommand(command);
                    console.log(this.button.getCommands);
                };
                class_1.prototype.getUser = function () {
                    var command = new GetUserCommand(this.userDBService); // Concrete Command
                    this.button.executeCommand(command);
                    console.log(this.button.getCommands);
                };
                class_1.prototype.sell = function () {
                    var command = new ShopSellCommand(this.shoppingService); // Concrete Command
                    this.button.executeCommand(command, this.items.value);
                    console.log(this.button.getCommands);
                };
                class_1.prototype.buy = function () {
                    var command = new ShopBuyCommand(this.shoppingService); // Concrete Command
                    this.button.executeCommand(command, this.items.value);
                    console.log(this.button.getCommands);
                };
                class_1.prototype.saveCart = function () {
                    var command = new SaveCartCommand(this.shoppingService); // Concrete Command
                    this.button.executeCommand(command, this.items.value);
                    console.log(this.button.getCommands);
                };
                class_1.prototype.circle = function () {
                    var command = new DrawCircleCommand(this.doc, this.canvasHistory);
                    command.execute();
                    this.updateCanvasCommand();
                };
                class_1.prototype.line = function () {
                    var command = new DrawLineCommand(this.doc, this.canvasHistory);
                    command.execute();
                    this.updateCanvasCommand();
                };
                class_1.prototype.red = function () {
                    var command = new PaintRedCommand(this.doc, this.canvasHistory);
                    command.execute();
                    this.updateCanvasCommand();
                };
                class_1.prototype.blue = function () {
                    var command = new PaintBlueCommand(this.doc, this.canvasHistory);
                    command.execute();
                    this.updateCanvasCommand();
                };
                class_1.prototype.undo = function () {
                    var undoCommand = new UndoCommand(this.canvasHistory);
                    undoCommand.execute();
                    this.updateCanvasCommand();
                };
                class_1.prototype.updateCanvasCommand = function () {
                    this.currentCanvas = this.doc.getContent;
                };
                class_1.prototype.createTicket = function () {
                    var cmd = new CreateTicketCommand(this.CLService, { id: "ticket1" });
                    this.CommandManager.add(cmd);
                };
                class_1.prototype.closeTicket = function () {
                    var cmd = new CloseTicketCommand(this.CLService, { id: "ticket2" });
                    this.CommandManager.add(cmd);
                };
                class_1.prototype.createAddress = function () {
                    var cmd = new CreateAddressCommand(this.CLService, { id: "address1" });
                    this.CommandManager.add(cmd);
                };
                class_1.prototype.executeAll = function () {
                    this.CommandManager.executeCommand();
                };
                Object.defineProperty(class_1, "style", {
                    get: function () { return "STYLE_TEXT_PLACEHOLDER:app-command"; },
                    enumerable: true,
                    configurable: true
                });
                return class_1;
            }()));
        }
    };
});
