{"moduleFile":{"sourceFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/Proxy/CryptoCurrencyProxy.ts","jsFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/Proxy/CryptoCurrencyProxy.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":[],"potentialCmpRefs":[]},"jsText":"// 이전에 불러왔던 API 데이터 값을 proxy cache object 에 저장해두어서 매번 API 콜을 부르지 않고 cache 에 저장된 값을 불러올 수 있다\r\n// External API Service\r\nexport class CryptoCurrencyAPI {\r\n    getValueFromAPI(coin) {\r\n        alert(\"Calling External API...\");\r\n        switch (coin) {\r\n            case \"Bitcoin\":\r\n                return \"$1,000\";\r\n            case \"Ethereum\":\r\n                return \"$500\";\r\n            case \"Litecoin\":\r\n                return \"$300\";\r\n        }\r\n    }\r\n}\r\nexport class CryptoCurrencyProxy {\r\n    constructor() {\r\n        this.api = new CryptoCurrencyAPI();\r\n        this.cache = {};\r\n    }\r\n    getValue(coin) {\r\n        if (this.cache[coin] == null) {\r\n            this.cache[coin] = this.api.getValueFromAPI(coin);\r\n        }\r\n        else {\r\n            alert(\"Since the value is already in cache, I don't need to call external API this time!\");\r\n        }\r\n        alert(this.cache[coin]);\r\n        return this.cache[coin];\r\n    }\r\n}\r\n"}