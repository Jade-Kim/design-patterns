{"moduleFile":{"sourceFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/Singleton/Process.ts","jsFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/Singleton/Process.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":[],"potentialCmpRefs":[]},"jsText":"export class Process {\r\n    constructor(state) {\r\n        this.state = state;\r\n    }\r\n}\r\nconst SingletonPattern = (() => {\r\n    function ProcessManager() {\r\n        this.numProcess = 0;\r\n    }\r\n    let pManager;\r\n    function createProcessManager() {\r\n        pManager = new ProcessManager();\r\n        return pManager;\r\n    }\r\n    return {\r\n        getProcessManager: () => {\r\n            if (!pManager)\r\n                pManager = createProcessManager();\r\n            return pManager;\r\n        }\r\n    };\r\n})();\r\nconst processManager = SingletonPattern.getProcessManager();\r\nconst processManager2 = SingletonPattern.getProcessManager();\r\nconsole.log(processManager === processManager2);\r\n// Use Singleton pattern to limit the number of instances\r\n// instances, processManager and processManager2, are the same object?\r\n"}