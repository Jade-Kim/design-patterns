{"moduleFile":{"sourceFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/Iterator/ArrayIteratorHistory.ts","jsFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/Iterator/ArrayIteratorHistory.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":[],"potentialCmpRefs":[]},"jsText":"export class ArrayIteratorHistory {\r\n    constructor() {\r\n        this.data = new Array();\r\n    }\r\n    push(data) {\r\n        this.data.push(data);\r\n        console.log(this.data);\r\n    }\r\n    pop() {\r\n        return this.data.pop();\r\n    }\r\n    createIterator(order = 0) {\r\n        return new ArrayIteratorHistory.ArrayIterator(this, order);\r\n    }\r\n}\r\n// Concrete class inside of history class\r\nArrayIteratorHistory.ArrayIterator = class {\r\n    constructor(history, order) {\r\n        this.history = history;\r\n        this.order = order;\r\n        if (order === 0) {\r\n            this.index = 0;\r\n        }\r\n        else if (order === 1) {\r\n            this.index = this.history.data.hasOwnProperty.length - 1;\r\n        }\r\n    }\r\n    hasNext() {\r\n        if (this.order === 0) {\r\n            return this.index < this.history.data.length;\r\n        }\r\n        else if (this.order === 1) {\r\n            return this.index >= 0;\r\n        }\r\n    }\r\n    current() {\r\n        return this.history.data[this.index];\r\n    }\r\n    next() {\r\n        this.order === 0 ? this.index++ : this.index--;\r\n    }\r\n};\r\nexport class FixedArrayIteratorHistory {\r\n    constructor() {\r\n        this.data = new Array(10).fill(\"\");\r\n        Object.seal(this.data);\r\n        this.count = 0;\r\n    }\r\n    push(data) {\r\n        debugger;\r\n        this.data[this.count] = data;\r\n        this.count >= this.data.length - 1 ? this.count = 0 : this.count++;\r\n        console.log(this.data);\r\n    }\r\n    pop() {\r\n        return this.data[--this.count];\r\n    }\r\n    createIterator(order = 0) {\r\n        return new FixedArrayIteratorHistory.ArrayIterator(this, order);\r\n    }\r\n}\r\n// Concrete class inside of history class\r\nFixedArrayIteratorHistory.ArrayIterator = class {\r\n    constructor(history, order) {\r\n        this.history = history;\r\n        this.order = order;\r\n        if (order === 0) {\r\n            this.index = 0;\r\n        }\r\n        else if (order === 1) {\r\n            this.index = this.history.data.length - 1;\r\n        }\r\n    }\r\n    hasNext() {\r\n        if (this.order === 0) {\r\n            return this.index < this.history.data.length;\r\n        }\r\n        else if (this.order === 1) {\r\n            return this.index >= 0;\r\n        }\r\n    }\r\n    current() {\r\n        return this.history.data[this.index];\r\n    }\r\n    next() {\r\n        this.order === 0 ? this.index++ : this.index--;\r\n    }\r\n};\r\n"}