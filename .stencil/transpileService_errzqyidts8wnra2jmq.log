{"moduleFile":{"sourceFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/Observer/ObservableObject.ts","jsFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/Observer/ObservableObject.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":["/Users/jadekim/Projects/Practice/design-patterns/src/global/Observer/Observer"],"originalCollectionComponentPath":null,"originalImports":["./Observer"],"potentialCmpRefs":[]},"jsText":"import { RFIDPluginObserver } from \"./Observer\";\r\nexport class ObservableObject {\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n    // subscribe\r\n    addObserver(observer) {\r\n        const isExist = this.observers.indexOf(observer);\r\n        if (isExist !== -1) {\r\n            return console.log('Subject: Observer has been attached already.');\r\n        }\r\n        this.observers.push(observer);\r\n    }\r\n    // unsubscribe\r\n    removeObserver(observer) {\r\n        const i = this.observers.indexOf(observer);\r\n        if (i === -1) {\r\n            return console.log('Observer dose not exist.');\r\n        }\r\n        this.observers.splice(i, 1);\r\n    }\r\n    notifyObservers() {\r\n        for (const observer of this.observers) {\r\n            observer.update();\r\n        }\r\n    }\r\n}\r\nexport class RFIDPlugin extends ObservableObject {\r\n    get data() {\r\n        return this.currentData;\r\n    }\r\n    set data(data) {\r\n        this.currentData = data;\r\n        this.notifyObservers();\r\n    }\r\n}\r\nexport var rfidPlugin = new RFIDPlugin();\r\nexport var rfidPluginObserver = new RFIDPluginObserver(rfidPlugin);\r\nexport function checkRfidPlugin() {\r\n    // ... check the connection\r\n    const connectionStatus = \"Connected!\";\r\n    rfidPlugin.data = connectionStatus;\r\n}\r\n"}