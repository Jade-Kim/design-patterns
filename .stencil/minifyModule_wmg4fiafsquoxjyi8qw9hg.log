import{r as t,h as s}from"./p-6450b217.js";class n{constructor(t,s,n){this.x=t,this.y=s,this.icon=n}draw(){alert(`${this.x} ${this.y} ${this.icon.getType()}`)}}class i{constructor(t){this.iconFactory=t}getPoints(){let t=[];const s=new n(1,1,this.iconFactory.getPointIcon(r.CAFE));return t.push(s),t}}class e{constructor(t,s){this.type=t,this.icon=s,console.log(this.icon)}getType(){return this.type}}var r;!function(t){t.HOSPITAL="HOSPITAL",t.RESTAURANT="RESTAURANT",t.CAFE="CAFE"}(r||(r={}));class l{constructor(){this.icons={}}getPointIcon(t){if(!this.icons[t]){const s=new e(t,null);this.icons[t]=s}return this.icons[t]}}const o=class{constructor(s){t(this,s)}render(){return s("div",{class:"margin20"},s("h3",null,"Flyweight Pattern"),s("h6",{class:"grayHint"},"- Allows sharing common state between multiple objects "),s("h6",{class:"grayHint"},"- 각 객체에 모든 데이터를 저장하지 않고 여러 객체 사이의 공통된 state 를 공유하여 RAM 메모리를 적게 차지하도록 설계하는 패턴이다."),s("button",{class:"btn",onClick:()=>this.draw()},"Draw"),s("pattern-photos",{uml:"flyweight-uml.png",imp:"flyweight-i.png",cl:"flyweight-1.png",cl2:"flyweight-2.png"}))}draw(){let t=new i(new l);for(const s of t.getPoints())s.draw()}static get style(){return"STYLE_TEXT_PLACEHOLDER:app-flyweight"}};export{o as app_flyweight};