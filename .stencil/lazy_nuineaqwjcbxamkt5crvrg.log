import { registerInstance as __stencil_registerInstance } from "@stencil/core";
import { h } from "@stencil/core";
import { UserDBService, ShoppingService } from '../../global/Command/Receiver';
import { AddUserCommand, GetUserCommand, ShopSellCommand, ShopBuyCommand, SaveCartCommand } from '../../global/Command/ConcreteCommand';
import { Button } from '../../global/Command/Invoker';
export const Command = class {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
        this.userDBService = new UserDBService(); // Receiver
        this.shoppingService = new ShoppingService(); // Receiver
        this.button = new Button(); // Invoker
    }
    render() {
        return (h("div", { class: "margin20" }, h("h3", null, "Command Pattern"), h("h5", null, "Example 1) User DB Service"), h("button", { class: "btn margin20", onClick: _ => this.addUser() }, "Add User"), h("button", { class: "btn margin20", onClick: _ => this.getUser() }, "Get User Info"), h("h5", null, "Example 2) Shopping Service"), h("input", { ref: el => this.items = el, type: "text", placeholder: "Type items you need to sell/buy/save." }), h("button", { class: "btn margin20", onClick: _ => this.sell() }, "Sell"), h("button", { class: "btn margin20", onClick: _ => this.buy() }, "Buy"), h("button", { class: "btn margin20", onClick: _ => this.saveCart() }, "Save Cart"), h("h5", null, "Example 3) Command Undo"), h("input", { ref: el => this.items = el, type: "text", placeholder: "Type items you need to sell/buy/save." }), h("button", { class: "btn margin20", onClick: _ => this.sell() }, "Draw a circle"), h("button", { class: "btn margin20", onClick: _ => this.buy() }, "Draw a line"), h("button", { class: "btn margin20", onClick: _ => this.buy() }, "Paint red"), h("button", { class: "btn margin20", onClick: _ => this.buy() }, "Paint blue"), h("button", { class: "btn margin20", onClick: _ => this.undo() }, "Undo")));
    }
    addUser() {
        const command = new AddUserCommand(this.userDBService); // Concrete Command
        this.button.executeCommand(command);
        console.log(this.button.getCommands);
    }
    getUser() {
        const command = new GetUserCommand(this.userDBService); // Concrete Command
        this.button.executeCommand(command);
        console.log(this.button.getCommands);
    }
    sell() {
        const command = new ShopSellCommand(this.shoppingService); // Concrete Command
        this.button.executeCommand(command, this.items.value);
        console.log(this.button.getCommands);
    }
    buy() {
        const command = new ShopBuyCommand(this.shoppingService); // Concrete Command
        this.button.executeCommand(command, this.items.value);
        console.log(this.button.getCommands);
    }
    saveCart() {
        const command = new SaveCartCommand(this.shoppingService); // Concrete Command
        this.button.executeCommand(command, this.items.value);
        console.log(this.button.getCommands);
    }
    undo() {
    }
    static get style() { return "STYLE_TEXT_PLACEHOLDER:app-command"; }
};
