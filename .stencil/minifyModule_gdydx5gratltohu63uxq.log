import{r as t,h as a}from"./p-6450b217.js";class e{constructor(t){this.image=t}apply(t){t.apply(this.image)}}class s{}class r{constructor(t){this.thirdPartyFilter=t}apply(t){this.thirdPartyFilter.init(),this.thirdPartyFilter.render(t)}}class l{init(){}render(t){console.log(t),alert("third party filter applied to image ")}}const i=class{constructor(a){t(this,a)}render(){return a("div",{class:"margin20"},a("h3",null,"Adapter Pattern"),a("h6",{class:"grayHint"},"- Allows objects with incompatible interfaces to ",a("span",{class:"blueHint"},"collaborate interfaces = Adapter")," that clients expect"),a("h6",{class:"grayHint"},"- 외부 라이브러리/프레임워크와 클라이언트가 ",a("span",{class:"blueHint"},"소통할 수 있는 인터페이스 = 어댑터")," 를 만들어 호환이 가능하도록 하는 설계 방식이다."),a("p",null,"외부 라이브러리 이미지 필터를 client 소스 코드에 적용하기 위해 AdaptThirdPartyFilter 클래스와 소통한다."),a("button",{class:"waves-effect waves-light btn-large margin20",onClick:()=>this.applyFilter()},"Apply Image Filter"),a("pattern-photos",{uml:"adapter-uml.png",imp:"adapter-i.png",cl:"adapter.png"}))}applyFilter(){new e(new s).apply(new r(new l))}static get style(){return"STYLE_TEXT_PLACEHOLDER:app-adapter"}};export{i as app_adapter};