{"moduleFile":{"sourceFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/MyEvent/MyEvent.ts","jsFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/MyEvent/MyEvent.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":[],"potentialCmpRefs":[]},"jsText":"// abstract class MyEvent {\r\n//     protected listeners: Array<Function> = [];\r\n//     abstract fire(data?: any): void;\r\n//     abstract listener(fn: Function): void;\r\n// }\r\nclass MyEvent {\r\n    constructor() {\r\n        this.listeners = []; // An array of functions\r\n    }\r\n    fire(data) {\r\n        this.listeners.forEach(fn => {\r\n            data ? fn(data) : fn();\r\n        });\r\n    }\r\n    listener(fn) {\r\n        this.listeners.push(fn);\r\n    }\r\n}\r\nexport const pluginConnection = new MyEvent();\r\nexport function checkConnection() {\r\n    // ... check the connection\r\n    const connectionStatus = \"Connected!\";\r\n    pluginConnection.fire(connectionStatus);\r\n}\r\n"}