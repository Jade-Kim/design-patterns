{"moduleFile":{"sourceFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/Command/Composite Command/CompositeCommand.ts","jsFilePath":"/Users/jadekim/Projects/Practice/design-patterns/src/global/Command/Composite Command/CompositeCommand.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":[],"potentialCmpRefs":[]},"jsText":"export class CommandManager {\r\n    constructor() {\r\n        this.commands = [];\r\n    }\r\n    add(cmd) {\r\n        this.commands.push(cmd);\r\n    }\r\n    async executeCommand() {\r\n        // sort command by order\r\n        this.commands = this.commands.sort(getOrderBy(\"order\"));\r\n        for (const cmd of this.commands) {\r\n            try {\r\n                await cmd.execute();\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getOrderBy(key) {\r\n    return function innerSort(a, b) {\r\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key))\r\n            return 0;\r\n        const varA = a[key];\r\n        const varB = b[key];\r\n        let comparison = 0;\r\n        if (varA > varB) {\r\n            comparison = 1;\r\n        }\r\n        else if (varA < varB) {\r\n            comparison = -1;\r\n        }\r\n        return comparison;\r\n    };\r\n}\r\n"}