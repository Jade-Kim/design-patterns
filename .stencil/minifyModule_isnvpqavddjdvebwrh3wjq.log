import{r as e,h as t}from"./p-6450b217.js";class s{constructor(e){this.user=e}async execute(){try{await this.user.validate(this.user)?(this.beforeSave(),this.save(),this.afterSave()):console.log("user validate failed.")}catch(e){return console.log("user validate failed."),!1}}}class a extends s{beforeSave(){alert("Some Logic here Before Save User Info")}save(){alert("User Info Saved!")}afterSave(){alert("Some Logic here After Save User Info")}}class r extends s{constructor(e,t){super(e),this.content=t}beforeSave(){alert("Some Logic here Before Save Blog Post")}save(){alert("Blog Post Saved! Content: "+this.content)}afterSave(){alert("Some Logic here After Save Blog Post")}}class o{constructor(e,t){this.username=e,this.pw=t}async validate(e){return console.log(e),alert("validated user!"),!0}}const l=class{constructor(t){e(this,t)}render(){return t("div",{class:"margin20"},t("h3",null,"Template Method Pattern"),t("h6",{class:"grayHint"},"- Abstract Class draws a blueprint of how the class will be structured. The template method will be implemented for every concrete classes and primitive operation 1 & 2 are abstract methods called hooks. The concrete sub classes will be inherited from abstract class and should implement the hooks."),t("h6",{class:"grayHint"},"- 템플릿 메소드는 클래스의 Structure, 큰 그림을 미리 그려놓고 세부 사항 Hooks 은 Sub-class 에서 실제로 실행될 수 있도록 한다. 프레임워크를 짤 때 많이 사용되는 패턴.",t("br",null),"항상 같은 내용을 실행하는 메소드와 상황에 따라(유저에 따라) 조금 다른 내용을 실행하는 메소드를 가지고 있다."),t("br",null),t("input",{type:"text",ref:e=>this.username=e,placeholder:"user name"}),t("input",{type:"text",ref:e=>this.pw=e,placeholder:"password"}),t("input",{type:"text",ref:e=>this.blog=e,placeholder:"blog post content"}),t("button",{class:"btn margin20",onClick:()=>this.saveUserInfo()},"Save User Info"),t("button",{class:"btn margin20",onClick:()=>this.saveBlogPost()},"Save Blog Info"),t("pattern-photos",{uml:"templateMethod-uml.png",imp:"templateMethod-i.png",cl:"templateMethod-1.png",cl2:"templateMethod-2.png"}))}saveUserInfo(){const e=new o(this.username.value,this.pw.value);new a(e).execute()}saveBlogPost(){const e=new o(this.username.value,this.pw.value);new r(e,this.blog.value).execute()}static get style(){return"STYLE_TEXT_PLACEHOLDER:app-template"}};export{l as app_template};