import{r as t,h as s}from"./p-6450b217.js";var e=new class extends class{constructor(){this.observers=[]}addObserver(t){if(-1!==this.observers.indexOf(t))return console.log("Subject: Observer has been attached already.");this.observers.push(t)}removeObserver(t){const s=this.observers.indexOf(t);if(-1===s)return console.log("Observer dose not exist.");this.observers.splice(s,1)}notifyObservers(){for(const t of this.observers)t.update()}}{get data(){return this.currentData}set data(t){this.currentData=t,this.notifyObservers()}},n=new class{constructor(t){this.rfidPlugin=t,this._notifier=[]}update(){this._notifier.forEach(t=>{t(this.rfidPlugin.data)}),console.log(this)}listener(t){this._notifier.push(t)}}(e);const o=class{constructor(s){t(this,s)}render(){return s("div",{class:"margin20"},s("h3",null,"Observer Pattern"),s("h6",{class:"grayHint"},"- Allows a subscription mechanism to notify other objects when any events happen."),s("h6",{class:"grayHint"},"- 이벤트가 생기면 해당 이벤트를 구독하고 있는 다른 객체에게 알려주는 설계 패턴이다."),s("h5",null,"Handle a plugin connection"),s("button",{class:"btn margin20",onClick:()=>this.connect()},"Connect"),s("button",{class:"btn margin20",onClick:()=>this.disconnect()},"Disconnect"),s("div",null,this.result_plugin))}componentWillLoad(){n.listener(t=>this.result_plugin=t)}componentDidLoad(){e.addObserver(n),e.data="Connected!"}connect(){e.data="Connected"}disconnect(){e.data="Disconnected"}static get style(){return"STYLE_TEXT_PLACEHOLDER:app-observer"}};export{o as app_observer};